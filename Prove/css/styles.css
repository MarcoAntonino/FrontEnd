*{
	/*i box sono i contenitori (div, p, ecc), con questa istruzione gli dico che
	 il suo contenuto deve essere tutto dentro il mio monitor, evitando quindi
	 che vada a capo da solo se non ci sta*/
	box-sizing: border-box;
	border: 1px solid black;
}

html, body {
	margin: 0;
	/*100vh significa il 100% dell'altezza del monitor utilizzato, vh è consigliato metterlo solo nell'html e nel body*/
	height: 100%;
	font-size: 14px;
}

body{
	padding-top: 90px;	/*aumento padding-top del body perchè ho messo fixed nav e header*/
}

header{
	background: orange;
	padding: 20px;
	width: 100%;
	height: 50px;
	position: fixed;
	top: 0;
	left: 0;
	right: 0;
	z-index: 100;
}

header .logo{
	float: left;
}

header .login{
	float: right;
}

header .text-color{
	color: white;
}

p{
	text-align: justify;
}

.container{
	clear: both;	/*pulisce i float right e left, e va capo*/
	width: 80%;
	position: relative;
	float: right;
}

/*questo container successivo è detto clearfix e si usa perché il body vede tutti
 i div come un oggetto unico, anche se vanno a capo con il clear
 (lo vede come una serpentina), aggiungendo un contenuto vuoto, interrompo la
 serpentina e ciò che c'è dopo sarà a se stante*/
.container:after{	/*after mi dice appena dopo il container aggiungi quello che c'è dentro*/
	content: "";
	display: block;
	clear: both;
}

nav {
	background: #eee;
	height: 40px;
	width: 100%;
	padding-top: 9px;
	padding-left: 20px;
	position: fixed;
	top: 50px;
	z-index: 100;
}

nav ul{
	list-style: none;
	margin: 0;
	padding: 0;
}

nav ul li{
	float: left;
	margin-right: 10px;
}

nav ul a{
	text-decoration: none;
}

section {
	background: #ff4e00;
	height: 100%;
	width: 100%;
}


section h1{
	color: white;
	margin-top: 0; /*Per togliere le linee bianche*/
}

 h2{
	color: white;
	margin-top: 0; /*Per togliere le linee bianche*/
}

section p{
	color: white;
}





/*Nel mobile si danno degli intervalli, degli scalini, non degli intervalli*/
/*Si ragiona mobile first*/
/*nel mondo responsive, dimenticatevi di ragionare a pixel,
tranne che nel breakpoint che è la dimensione dello schermo. Che ovviamente è a pixel.
Quando si lavora dentro al sito invece si lavora a percentuali.
Allora anche per i font sarebbe bene ragionare in valori relativi, come l'unità di misura em */

/*Unità em*/
/*La dimensione base in pixel di un font è 16px che corrispondono a 100%
Cioè se io scrivo font-size! 100% è come se gli stessi dicendo font-size 16px
In tipografia si ragiona in size o px.*/
/*em in inglese è la m, quindi una M maiuscola che è il carattere più grande
che abbiamo, equivale a 1 em. ☺è semplicemente un discorso di pti di riferimento.
*/

/*esistono anche gli rem (root em):
quando noi andiamo a definire un rem, stiamo praticamente dicendo al nostro sito
che deve prendere come pto di riferimento i 16 px che il browser mette a disposizione
se io ivnece di em, lui prende come punto di riferimento epr fare i suoi calcoli,
il pixel del suo genitore. vuol dire che se io un div, dentro al div io ho impostato
per qualche motivo un font size di 15 px, se poi qui dentro gli disegno qualcosa
da 1em, si prende come riferimento i 15px del genitore. Se invece gli dico 1 rem,
allora prende come riferimento i 16px del rem.*/
/*Il rem possiamo usarlo come misura di riferimento ASSOLUTA.*/
/*Tuttavia è molto difficile che si utilizzi un font != da 16px, che è quello
base del browser, quindi quasi sempre si ragiona in em. A meno che, si prenda in
mano il lavoro di un altro e allora si debba cercare di sbrogliarlo per renderlo
responsivo.*/

/*Per forzare la cosa, se alla pagina html e body do 15 px allora ragiono sotto
in rem allora la mia rotto sarà 15 px e sono dal culo. */

/*A livello pratico, ragionate in em perchè tanto il suo genitore sarà sempre in
16px*/

/*Questo NOn vuol dire che i ltesto sarà responsive, cioè il font non si
rimpicciolirà.
Per fare questo bisogna fare un procedimento che non è ancora supportato in
tutti i browser.*/
/*Oppure fai una media query e dici che da 0 a 1024 è di 14px mentre da sopra
sarà 16px*/
